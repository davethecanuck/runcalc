{"version":3,"sources":["scenario.js","race.js","distance.js","past_race_form.js","past_race_table.js","target_race_table.js","index.js"],"names":["Scenario","age","Race","label","distance","time","timeParts","scenario","this","setTimeParts","length","unshift","calcTime","adjust","Math","log2","ratio","weight","pow","console","log","DISTANCE_OPTIONS","value","FIELD","pattern","RegExp","help","PastRaceForm","props","handleDistanceSelect","selectedOption","setState","errors","state","handleChange","event","preventDefault","target","name","check","test","validateForm","valid","Object","values","forEach","val","handleSubmit","info","s","race","parseInt","parsedTime","exec","push","JSON","stringify","addPastRace","error","className","onSubmit","noValidate","htmlFor","options","onChange","type","React","Component","PastRaceTable","rows","races","PastRaceRow","age_grade","ageGrade","TargetRaceTable","pastRaces","totalTime","totalWeight","pastRace","predictTime","TargetRaceRow","timeString","hours","floor","minutes","seconds","toString","padStart","RaceCalc","r","newPastRaces","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e7fb72e.chunk.js","sourcesContent":["// Defines a race day scenario. \n// TBD: \n// - altitude\n// - race name (if a known race with comparible results)\nexport class Scenario {\n  age = 25; // Default\n}","import { Scenario } from './scenario.js';\n\nexport class Race {\n  label = null;       // Common name for race distance\n  distance = null;    // In meters\n  time = null;        // In seconds\n  timeParts = null;   // Array of hh:mm, mm:ss, or hh:mm:ss\n  scenario = new Scenario();\n\n  setDistance(distance) {\n    this.distance = distance;\n\n    // Re-validate time by setting the hh:mm:ss time parts\n    // and re-calculating the time so it's reasonable for the \n    // distance\n    if (this.timeParts != null) {\n      this.setTimeParts(this.timeParts);\n    }\n  }\n\n  // EYE TBD - get from scenario.age\n  ageGrade() {\n    return 75;\n  }\n\n  // Set time given array of [hh,mm,ss] or [mm,ss] or [hh,mm]\n  // Note that offset 0 is the most significant part (hh or mm).\n  // Adjust time based on what's reasonable for the distance\n  setTimeParts(timeParts) {\n    while (timeParts.length < 3) {\n      timeParts.unshift(0);  // Pad with leading 0 \n    }\n\n    if (this.distance != null && timeParts[0] === 0) {\n      // First pass - assume mm:ss\n      let time = this.calcTime(timeParts);\n      let velocity = this.distance / time;\n\n      if (velocity > 15.0) { \n        // 15 m/s is faster than a human can run, try hh:mm instead\n        timeParts[0] = timeParts[1];\n        timeParts[1] = timeParts[2];\n        timeParts[2] = 0;\n      }\n    }\n\n    // Fully specified hh:mm:ss\n    this.timeParts = timeParts\n    this.time = this.calcTime(timeParts);\n  }\n\n  // Convert timeParts to an integer time\n  calcTime(timeParts) {\n    return timeParts[0] * 3600 + timeParts[1] * 60 + timeParts[2];\n  }\n\n  // Predict time for a given distance, returning the time and \n  // a confidence weight for our prediction. \n  // EYE - add scenario as an input so time delta is part of confidence\n  // and using our own race.scenario as well\n  predictTime(distance) {\n    // Using formula of doubling distance leading to doubling time + 6%\n    // EYE - Nope, this breaks down at longer distances\n    let adjust = 1.06 ** Math.log2(distance / this.distance);\n    let time = this.time * (distance / this.distance) * adjust;\n\n    // Weight is square of ratio of race distances (exponentially \n    // diminishing predictive value as distances get further apart)\n    let ratio = distance / this.distance;\n    if (ratio > 1.0) {\n      ratio = 1 / ratio;\n    }\n    let weight = Math.pow(ratio, 2);\n\n    console.log(\"1. predictTime this.distance=\" + this.distance + \n        \" this.time=\" + this.time + \" input.distance=\" + distance + \n        \" output.time=\" + time + \" adjust=\" + adjust + \n        \" ratio=\" + ratio + \" weight=\" + weight);\n\n    return [time, weight];\n  }\n}","export const DISTANCE_OPTIONS = [\n  { label: \"400m\", value: 400 },\n  { label: \"800m\", value: 800 },\n  { label: \"1km\", value: 1000 },\n  { label: \"1500m\", value: 1500 },\n  { label: \"1600m\", value: 1600 },\n  { label: \"1 mile\", value: 1609 },\n  { label: \"3000m\", value: 3000 },\n  { label: \"2 mile\", value: 3219 },\n  { label: \"5km\", value: 5000 },\n  { label: \"8km\", value: 8000 },\n  { label: \"5 mile\", value: 8047 },\n  { label: \"10km\", value: 10000 },\n  { label: \"15km\", value: 15000 },\n  { label: \"20km\", value: 20000 },\n  { label: \"13.1 mile\", value: 21097 },\n  { label: \"26.2 mile\", value: 42195 },\n  { label: \"50km\", value: 50000 }\n]\n","import React from 'react';\nimport Select from 'react-select';\nimport { Scenario } from './scenario';\nimport { Race } from './race';\nimport { DISTANCE_OPTIONS } from './distance';\n\n// Regular expressions for the form inputs\nconst FIELD = {\n  'distance': {\n    pattern: RegExp(/^\\s*\\d+\\s*$/),\n    help: '(select a distance)'\n  },\n  'time': {\n    pattern: RegExp(/^\\s*(\\d+):?([0-5]\\d{1}?)(:([0-5]\\d{1}))?\\s*$/),\n    help: '(hh:mm:ss or hh:mm or mm:ss)'\n  },\n  'age': {\n    pattern: RegExp(/^\\s*\\d*\\s*$/),\n    help: '(years)'\n  }\n};\n\n// Form to add past race\nexport class PastRaceForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      distance: null,\n      time: null,\n      age: null,\n      errors: {\n        distance: FIELD.distance.help,\n        time: FIELD.time.help,\n        age: '',  // Optional field\n      }\n    };\n  }\n\n  // Handle distance state\n  handleDistanceSelect = (selectedOption) => {\n    this.setState({ distance: selectedOption.value });\n    let errors = {...this.state.errors};\n    errors.distance = '';\n    this.setState({ errors });\n  };\n\n  // Validate inputs on each key stroke\n  handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    let errors = this.state.errors;\n    let check = FIELD[name];\n    errors[name] = check.pattern.test(value) ? '' : check.help;\n    this.setState({errors, [name]: value});\n  }\n\n  validateForm = () => {\n    let valid = true;\n    Object.values(this.state.errors).forEach(\n      (val) => val.length > 0 && (valid = false)\n    );\n    return valid;\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.validateForm(this.state.errors)) {\n      console.info('Valid Form')\n      let s = new Scenario();\n      s.age = this.state.age;\n\n      let race = new Race();\n      race.distance = parseInt(this.state.distance);\n      race.scenario = s;\n      \n      // Parse time into [hh,mm,(ss)] array\n      let parsedTime = FIELD.time.pattern.exec(this.state.time);\n      let timeParts = [];\n      timeParts.push(parseInt(parsedTime[1]));\n      timeParts.push(parseInt(parsedTime[2]));\n\n      // Optional last part (ss or mm) is in offset 4 of regex\n      if (parsedTime[4] != null) {\n        timeParts.push(parseInt(parsedTime[4]));\n      }\n      race.setTimeParts(timeParts);\n      console.log(JSON.stringify(race));\n\n      // Submit to the parent past races list\n      this.props.addPastRace(race);\n    }\n    else {\n      console.error('Invalid Form')\n    }\n  }\n\n  render() {\n    const {errors} = this.state;\n    return (\n      <div className='form-wrapper'>\n        <h2> Add a Past Race </h2>\n        <form onSubmit={this.handleSubmit} noValidate >\n          <div className='distance'>\n            <label htmlFor=\"distance\"> \n              Distance \n              {errors.distance.length > 0 && \n                <span className='error'>{errors.distance}</span>\n              }\n            </label>\n            <Select \n              options={DISTANCE_OPTIONS}\n              onChange={this.handleDistanceSelect}\n            />\n\n          </div>\n          <div className='time'>\n            <label htmlFor=\"time\"> \n              Finish Time \n              {errors.time.length > 0 && \n                <span className='error'>{errors.time}</span>\n              }\n            </label>\n            <input type='text' name='time' onChange={this.handleChange} noValidate />\n          </div>\n          <div className='age'>\n            <label htmlFor=\"age\"> \n              Your Age (optional)\n              {errors.age.length > 0 && \n                <span className='error'>{errors.age}</span>\n              }\n            </label>\n            <input type='text' name='age' onChange={this.handleChange} noValidate />\n          </div>\n          <div className='submit'>\n            <button> Add </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}","import React from 'react';\n\n// Past races used to predict future results\nexport class PastRaceTable extends React.Component {\n  render() {\n    const rows = [];\n    this.props.races.forEach((race) => {\n        rows.push(\n          <PastRaceRow race={race} key={rows.length}/>\n        );\n    });\n\n    return (\n      <div className=\"race-table\"> \n        <h2> Past Races </h2>\n        <table>\n          <thead> \n            <tr>\n              <th> Distance </th>\n              <th> Finish Time </th>\n              <th> Age </th>\n              <th> Age Grade </th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PastRaceRow extends React.Component {\n  render() {\n    let race = this.props.race;\n    let distance = race ? race.distance : \"\";\n    let time = race ? race.time : \"\";\n    let age = race ? race.scenario.age : \"\";\n    let age_grade = race ? race.ageGrade() : \"\";\n\n    return (\n      <tr>\n        <td> {distance} </td>\n        <td> {time} </td>\n        <td> {age} </td>\n        <td> {age_grade} </td>\n        <td> <input type=\"submit\" name=\"past-race-remove\" value=\"-\" /> </td>\n      </tr>\n    );\n  }\n}","import React from 'react';\nimport { DISTANCE_OPTIONS } from './distance.js';\nimport { Race } from './race.js';\n\n// Predicted times for various distances\nexport class TargetRaceTable extends React.Component {\n  render() {\n    // EYE - we need to create a model based on the past races\n    // and create output rows with the predictions from the model\n    // for each distance. Maybe push all this to a model method?\n    const rows = [];\n    if (this.props.pastRaces.length > 0) {\n      DISTANCE_OPTIONS.forEach((distance) => {\n        // Get weighted predictions from past races\n        let totalTime = 0.0;\n        let totalWeight = 0.0;\n\n        this.props.pastRaces.forEach((pastRace) => {\n          let [time, weight] = pastRace.predictTime(distance.value);\n          totalTime += time * weight;\n          totalWeight += weight;\n        });\n\n        if (totalWeight > 0.0) {\n          let race = new Race();\n          race.label = distance.label;\n          race.distance = distance.value;\n\n          // EYE - Converting to int for now. Should render as hh:mm:ss\n          race.time = parseInt(totalTime / totalWeight);\n          rows.push(\n           <TargetRaceRow race={race} key={rows.length}/>\n          );\n        }\n      });\n    }\n\n    return (\n      <div className=\"race-table\"> \n        <h2> Target Races </h2>\n        <table>\n          <thead> \n            <tr>\n              <th> Distance </th>\n              <th> Finish Time </th>\n              <th> Age Grade </th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass TargetRaceRow extends React.Component {\n  render() {\n    let race = this.props.race;\n    let label = race ? race.label : \"\";\n    let time = race ? race.time : \"\";\n    let timeString = \"\";\n    let age_grade = race ? race.ageGrade() : \"\";\n\n    // EYE export function so it can be used in PastRaceRow\n    if (time) {\n      let hours = Math.floor(time / 3600);\n      let minutes = Math.floor((time - (hours * 3600)) / 60);\n      let seconds = time - (hours * 3600) - (minutes * 60);\n\n      timeString = hours.toString().padStart(2, '0') + ':' + \n        minutes.toString().padStart(2, '0') + ':' + \n        seconds.toString().padStart(2, '0');\n    }\n\n    return (\n      <tr>\n        <td> {label} </td>\n        <td> {timeString} </td>\n        <td> {age_grade} </td>\n      </tr>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {PastRaceForm} from './past_race_form.js';\nimport {PastRaceTable} from './past_race_table.js';\nimport {TargetRaceTable} from './target_race_table.js';\nimport './index.css';\n\n// Top level application \nclass RaceCalc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pastRaces: [],\n    }\n  }\n\n  render() {\n    // EYE should have a scenario form to the left of the \n    // TargetRaceTable (below past race form)\n    return (\n      <div className=\"wrapper\">\n        <div className=\"race-calc-row\">\n          <PastRaceForm addPastRace={(r) => this.addPastRace(r)}/>\n          <PastRaceTable races={this.state.pastRaces}/>\n          <TargetRaceTable pastRaces={this.state.pastRaces}/>\n        </div>\n        <div className=\"race-calc-row\">\n        </div>\n      </div>\n    );\n  }\n\n  addPastRace(race) {\n    let newPastRaces = this.state.pastRaces.slice();\n    newPastRaces.push(race);\n    this.setState({ pastRaces: newPastRaces });\n  }\n}\n\n// ===================================\nReactDOM.render(\n    <RaceCalc />,\n    document.getElementById('root')\n);"],"sourceRoot":""}