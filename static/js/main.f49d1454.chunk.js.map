{"version":3,"sources":["styles.js","scenario.js","distance.js","race.js","past_race_form.js","past_race_table.js","target_race_table.js","race_calc.js","index.js"],"names":["styles","theme","root","flexGrow","backgroundColor","direction","flexWrap","table","margin","spacing","width","paper","padding","textAlign","color","palette","text","secondary","maxWidth","Scenario","age","DISTANCE_OPTIONS","label","value","LABEL_BY_DISTANCE","forEach","distance","Race","time","timeParts","scenario","meters","this","setTimeParts","length","unshift","calcTime","adjust","Math","log2","ratio","weight","console","log","timeString","hours","floor","minutes","seconds","toString","padStart","FIELD","pattern","RegExp","help","PastRaceForm","props","handleDistanceSelect","selectedOption","setState","errors","state","handleChange","event","preventDefault","target","name","check","test","validateForm","valid","Object","values","val","handleSubmit","s","parsedTime","exec","push","parseInt","race","setDistance","addPastRace","error","classes","Paper","className","onSubmit","noValidate","htmlFor","options","onChange","type","React","Component","withStyles","PastRaceTable","rows","races","PastRaceRow","getDistanceLabel","getTimeString","ageGrade","onClick","Button","variant","TargetRaceTable","pastRaces","totalTime","totalWeight","pastRace","predictTime","TargetRaceRow","RaceCalc","Grid","container","item","xs","r","newPastRaces","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f49d1454.chunk.js","sourcesContent":["const styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: '#4A4E69',\n    direction: 'row',\n    flexWrap: 'wrap',\n  },\n  table: {\n    margin: theme.spacing(0),\n    width: '100%',\n  },\n  paper: {\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n    textAlign: 'left',\n    color: theme.palette.text.secondary,\n    maxWidth: '400px',\n  },\n});\n\nexport default styles;","// Defines a race day scenario. \n// TBD: \n// - altitude\n// - race name (if a known race with comparible results)\nexport class Scenario {\n  age = 25; // Default\n}","export const DISTANCE_OPTIONS = [\n  { label: \"400m\", value: 400 },\n  { label: \"800m\", value: 800 },\n  { label: \"1km\", value: 1000 },\n  { label: \"1500m\", value: 1500 },\n  { label: \"1600m\", value: 1600 },\n  { label: \"1 mile\", value: 1609 },\n  { label: \"3000m\", value: 3000 },\n  { label: \"2 mile\", value: 3219 },\n  { label: \"5km\", value: 5000 },\n  { label: \"8km\", value: 8000 },\n  { label: \"5 mile\", value: 8047 },\n  { label: \"10km\", value: 10000 },\n  { label: \"15km\", value: 15000 },\n  { label: \"20km\", value: 20000 },\n  { label: \"13.1 mile\", value: 21097 },\n  { label: \"26.2 mile\", value: 42195 },\n  { label: \"50km\", value: 50000 }\n]\n\n// Initialize map version of DISTANCE_OPTIONS\nconst LABEL_BY_DISTANCE = {}\n\nDISTANCE_OPTIONS.forEach((distance) => {\n  LABEL_BY_DISTANCE[distance.value] = distance.label;\n});\n\n// Return label for the distance, or just the raw meters if not found\nexport function getLabel(meters) {\n  let label = LABEL_BY_DISTANCE[meters];\n  return label ? label : meters;\n}","import { Scenario } from './scenario.js';\nimport { getLabel } from './distance.js';\n\nexport class Race {\n  distance = null;    // In meters\n  time = null;        // In seconds\n  timeParts = null;   // Array of hh:mm, mm:ss, or hh:mm:ss\n  scenario = new Scenario();\n\n  setDistance(meters) {\n    this.distance = meters;\n\n    // Re-validate time by setting the hh:mm:ss time parts\n    // and re-calculating the time so it's reasonable for the \n    // distance\n    if (this.timeParts != null) {\n      this.setTimeParts(this.timeParts);\n    }\n  }\n\n  // EYE TBD - get from scenario.age\n  ageGrade() {\n    return 75;\n  }\n\n  // Set time given array of [hh,mm,ss] or [mm,ss] or [hh,mm]\n  // Note that offset 0 is the most significant part (hh or mm).\n  // Adjust time based on what's reasonable for the distance\n  setTimeParts(timeParts) {\n    while (timeParts.length < 3) {\n      timeParts.unshift(0);  // Pad with leading 0 \n    }\n\n    if (this.distance != null && timeParts[0] === 0) {\n      // First pass - assume mm:ss\n      let time = this.calcTime(timeParts);\n      let velocity = this.distance / time;\n\n      if (velocity > 15.0) { \n        // 15 m/s is faster than a human can run, try hh:mm instead\n        timeParts[0] = timeParts[1];\n        timeParts[1] = timeParts[2];\n        timeParts[2] = 0;\n      }\n    }\n\n    // Fully specified hh:mm:ss\n    this.timeParts = timeParts\n    this.time = this.calcTime(timeParts);\n  }\n\n  // Convert timeParts to an integer time\n  calcTime(timeParts) {\n    return timeParts[0] * 3600 + timeParts[1] * 60 + timeParts[2];\n  }\n\n  // Predict time for a given distance, returning the time and \n  // a confidence weight for our prediction. \n  // EYE - add scenario as an input so time delta is part of confidence\n  // and using our own race.scenario as well\n  predictTime(distance) {\n    // Using formula of doubling distance leading to doubling time + 6%\n    let adjust = 1.06 ** Math.log2(distance / this.distance);\n    let time = this.time * (distance / this.distance) * adjust;\n\n    // Weight is ratio of race distances diminishing predictive value \n    // as distances get further apart. \n    // EYE - we'll further adjust weight by age, altitude, etc. as \n    // scenario data is fleshed out\n    let ratio = distance / this.distance;\n    if (ratio > 1.0) {\n      ratio = 1 / ratio;\n    }\n    let weight = ratio;  \n\n    console.log(\"1. predictTime this.distance=\" + this.distance + \n        \" this.time=\" + this.time + \" input.distance=\" + distance + \n        \" output.time=\" + time + \" adjust=\" + adjust + \n        \" ratio=\" + ratio + \" weight=\" + weight);\n\n    return [time, weight];\n  }\n\n  // Return time as HH:MM:SS format\n  getTimeString() {\n    let timeString = \"\";\n    if (this.time) {\n      let hours = Math.floor(this.time / 3600);\n      let minutes = Math.floor((this.time - (hours * 3600)) / 60);\n      let seconds = this.time - (hours * 3600) - (minutes * 60);\n\n      timeString = hours.toString().padStart(2, '0') + ':' + \n        minutes.toString().padStart(2, '0') + ':' + \n        seconds.toString().padStart(2, '0');\n    }\n    return timeString;\n  }\n\n  // Return the race distance label\n  getDistanceLabel() {\n    return getLabel(this.distance);\n  }\n}","import React from 'react';\nimport Select from 'react-select';\n\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport styles from './styles';\n\nimport { Scenario } from './scenario';\nimport { Race } from './race';\nimport { DISTANCE_OPTIONS } from './distance';\n\n// Regular expressions for the form inputs\nconst FIELD = {\n  'distance': {\n    pattern: RegExp(/^\\s*\\d+\\s*$/),\n    help: '(select a distance)'\n  },\n  'time': {\n    pattern: RegExp(/^\\s*(\\d+):?([0-5]\\d{1}?)(:([0-5]\\d{1}))?\\s*$/),\n    help: '(hh:mm:ss or hh:mm or mm:ss)'\n  },\n  'age': {\n    pattern: RegExp(/^\\s*\\d*\\s*$/),\n    help: '(years)'\n  }\n};\n\n// Form to add past race\nexport class PastRaceForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      distance: null,\n      time: null,\n      age: null,\n      errors: {\n        distance: FIELD.distance.help,\n        time: FIELD.time.help,\n        age: '',  // Optional field\n      }\n    };\n  }\n\n  // Handle distance state\n  handleDistanceSelect = (selectedOption) => {\n    this.setState({ distance: selectedOption.value });\n    let errors = {...this.state.errors};\n    errors.distance = '';\n    this.setState({ errors });\n  };\n\n  // Validate inputs on each key stroke\n  handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    let errors = this.state.errors;\n    let check = FIELD[name];\n    errors[name] = check.pattern.test(value) ? '' : check.help;\n    this.setState({errors, [name]: value});\n  }\n\n  validateForm = () => {\n    let valid = true;\n    Object.values(this.state.errors).forEach(\n      (val) => val.length > 0 && (valid = false)\n    );\n    return valid;\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.validateForm(this.state.errors)) {\n      // Define the race scenario\n      let s = new Scenario();\n      s.age = this.state.age;\n\n      // Parse time into [hh,mm,(ss)] array\n      let parsedTime = FIELD.time.pattern.exec(this.state.time);\n      let timeParts = [];\n      timeParts.push(parseInt(parsedTime[1]));\n      timeParts.push(parseInt(parsedTime[2]));\n\n      // Optional last part (ss or mm) is in offset 4 of regex\n      if (parsedTime[4] != null) {\n        timeParts.push(parseInt(parsedTime[4]));\n      }\n\n      // Finally define the race object\n      let race = new Race();\n      race.setDistance(parseInt(this.state.distance));\n      race.setTimeParts(timeParts);\n      race.scenario = s;\n\n      // Submit to the parent past races list\n      this.props.addPastRace(race);\n    }\n    else {\n      console.error('Invalid Form')\n    }\n  }\n\n  render() {\n    const { errors } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <Paper className={classes.paper}> \n        <h2> Add a Past Race </h2>\n        <form onSubmit={this.handleSubmit} noValidate >\n          <div className='distance'>\n            <label htmlFor=\"distance\"> \n              Distance \n              {errors.distance.length > 0 && \n                <span className='error'>{errors.distance}</span>\n              }\n            </label>\n            <Select \n              options={DISTANCE_OPTIONS}\n              onChange={this.handleDistanceSelect}\n            />\n\n          </div>\n          <div className='time'>\n            <label htmlFor=\"time\"> \n              Finish Time \n              {errors.time.length > 0 && \n                <span className='error'>{errors.time}</span>\n              }\n            </label>\n            <input type='text' name='time' onChange={this.handleChange} noValidate />\n          </div>\n          <div className='age'>\n            <label htmlFor=\"age\"> \n              Your Age (optional)\n              {errors.age.length > 0 && \n                <span className='error'>{errors.age}</span>\n              }\n            </label>\n            <input type='text' name='age' onChange={this.handleChange} \n              noValidate />\n          </div>\n          <div className='submit'>\n            <button> Add </button>\n          </div>\n        </form>\n      </Paper>\n    );\n  }\n}\n\n// Needed for Material UI styles\nPastRaceForm.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(PastRaceForm);","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport styles from './styles';\n\n// Past races used to predict future results\nexport class PastRaceTable extends React.Component {\n  render() {\n    const { classes } = this.props;\n    const rows = [];\n    this.props.races.forEach((race) => {\n        rows.push(\n          <PastRaceRow race={race} key={rows.length}/>\n        );\n    });\n\n    //  <div className=\"race-table\"> \n    return (\n      <Paper className={classes.paper}>\n        <h2> Past Races </h2>\n        <table className='race-table'>\n          <thead> \n            <tr>\n              <th> Distance </th>\n              <th> Time </th>\n              <th> Age </th>\n              <th> Age Grade </th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </Paper>\n    );\n  }\n}\n\nfunction PastRaceRow(props) {\n  let race = props.race;\n  let label = race ? race.getDistanceLabel() : \"\";\n  let timeString = race ? race.getTimeString() : \"\";\n  let age = race ? race.scenario.age : \"\";\n  let ageGrade = race ? race.ageGrade() : \"\";\n\n  return (\n    <tr onClick={() => { console.log(\"Clicked \" + label); }}>\n      <td> {label} </td>\n      <td> {timeString} </td>\n      <td> {age} </td>\n      <td> {ageGrade} </td>\n      <td> \n        <Button variant=\"contained\" name=\"past-race-remove\">\n          -\n        </Button>\n      </td>\n\n    </tr>\n  );\n}\n\n// Needed for Material UI styles\nPastRaceTable.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(PastRaceTable);","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport styles from './styles'\n\nimport { DISTANCE_OPTIONS } from './distance.js';\nimport { Race } from './race.js';\n\n// Predicted times for various distances\nexport class TargetRaceTable extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    // EYE - we need to create a model based on the past races\n    // and create output rows with the predictions from the model\n    // for each distance. Maybe push all this to a model method?\n    const rows = [];\n\n    if (this.props.pastRaces.length > 0) {\n      DISTANCE_OPTIONS.forEach((distance) => {\n        // Get weighted predictions from past races\n        let totalTime = 0.0;\n        let totalWeight = 0.0;\n\n        this.props.pastRaces.forEach((pastRace) => {\n          let [time, weight] = pastRace.predictTime(distance.value);\n          totalTime += time * weight;\n          totalWeight += weight;\n        });\n\n        if (totalWeight > 0.0) {\n          let race = new Race();\n          race.distance = distance.value;\n\n          // EYE - Converting to int for now. Should render as hh:mm:ss\n          race.time = parseInt(totalTime / totalWeight);\n          rows.push(\n           <TargetRaceRow race={race} key={rows.length}/>\n          );\n        }\n      });\n    }\n\n    //  <div className=\"race-table\"> \n    return (\n      <Paper className={classes.paper}>\n        <h2> Target Races </h2>\n        <table className='race-table'>\n          <thead> \n            <tr>\n              <th> Distance </th>\n              <th> Time </th>\n              <th> Age Grade </th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </Paper>\n    );\n  }\n}\n\nfunction TargetRaceRow(props) {\n  let race = props.race;\n  let label = race ? race.getDistanceLabel() : \"\";\n  let timeString = race ? race.getTimeString() : \"\";\n  let ageGrade = race ? race.ageGrade() : \"\";\n\n  return (\n    <tr>\n      <td> {label} </td>\n      <td> {timeString} </td>\n      <td> {ageGrade} </td>\n    </tr>\n  );\n}\n\n// Needed for Material UI styles\nTargetRaceTable.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(TargetRaceTable);","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nimport PastRaceForm from './past_race_form.js';\nimport PastRaceTable from './past_race_table.js';\nimport TargetRaceTable from './target_race_table.js';\nimport styles from './styles.js';\n\n// Top level application \nexport class RaceCalc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pastRaces: [],\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    // EYE should have a scenario form too\n    return (\n      <Grid container className={classes.root} spacing={3}>\n        <Grid item xs={12}>\n          <PastRaceForm addPastRace={(r) => this.addPastRace(r)}/>\n          <PastRaceTable races={this.state.pastRaces}/>\n        </Grid>\n\n        <Grid item xs={12}>\n          <TargetRaceTable pastRaces={this.state.pastRaces}/>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  addPastRace(race) {\n    let newPastRaces = this.state.pastRaces.slice();\n    newPastRaces.push(race);\n    this.setState({ pastRaces: newPastRaces });\n  }\n}\n\n// Needed for Material UI styles\nRaceCalc.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(RaceCalc);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// NOTE!!! Material-UI classes don't work with: import { RaceCalc }\nimport RaceCalc from './race_calc.js';  \nimport './index.css';\n\n// ===================================\nReactDOM.render(\n    <RaceCalc />,\n    document.getElementById('root')\n);"],"sourceRoot":""}