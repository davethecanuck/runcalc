{"version":3,"sources":["styles.js","scenario.js","distance.js","race.js","past_race_form.js","past_race_table.js","target_race_table.js","race_calc.js","index.js"],"names":["styles","theme","root","flexGrow","backgroundColor","direction","flexWrap","table","margin","spacing","width","paper","padding","textAlign","color","palette","text","secondary","maxWidth","Scenario","age","DISTANCE_OPTIONS","label","value","LABEL_BY_DISTANCE","forEach","distance","Race","time","timeParts","scenario","meters","this","setTimeParts","length","unshift","calcTime","adjust","Math","log2","ratio","toHHMMSS","timeString","hours","floor","minutes","seconds","toString","padStart","FIELD","pattern","RegExp","help","INITIAL_STATE","errors","PastRaceForm","props","handleDistanceChange","selectedOption","setState","state","handleChange","event","preventDefault","target","name","check","test","validateForm","valid","Object","values","val","handleSubmit","s","parsedTime","exec","push","parseInt","race","setDistance","addPastRace","reset","JSON","parse","stringify","console","error","classes","Paper","className","onSubmit","autoComplete","noValidate","htmlFor","options","onChange","type","React","Component","withStyles","PastRaceTable","rows","races","PastRaceRow","raceId","removePastRace","getDistanceLabel","getTimeString","pace","getPaceString","Button","variant","onClick","TargetRaceTable","pastRaces","totalTime","totalWeight","pastRace","predictTime","weight","TargetRaceRow","RaceCalc","Grid","container","item","xs","r","newPastRaces","slice","rowNum","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdecf360.chunk.js","sourcesContent":["const styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: '#4A4E69',\n    direction: 'row',\n    flexWrap: 'wrap',\n  },\n  table: {\n    margin: theme.spacing(0),\n    width: '100%',\n  },\n  paper: {\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n    textAlign: 'left',\n    color: theme.palette.text.secondary,\n    maxWidth: '400px',\n  },\n});\n\nexport default styles;","// Defines a race day scenario. \n// TBD: \n// - altitude\n// - race name (if a known race with comparible results)\nexport class Scenario {\n  age = 25; // Default\n}","// 800m is the minimum distance where the model barely works, \n// and 1500m is probably closer to reality for predictiveness\nexport const DISTANCE_OPTIONS = [\n  { label: \"800m\", value: 800 },\n  { label: \"1km\", value: 1000 },\n  { label: \"1500m\", value: 1500 },\n  { label: \"1600m\", value: 1600 },\n  { label: \"1 mile\", value: 1609 },\n  { label: \"3000m\", value: 3000 },\n  { label: \"2 mile\", value: 3219 },\n  { label: \"5km\", value: 5000 },\n  { label: \"8km\", value: 8000 },\n  { label: \"5 mile\", value: 8047 },\n  { label: \"10km\", value: 10000 },\n  { label: \"15km\", value: 15000 },\n  { label: \"20km\", value: 20000 },\n  { label: \"13.1 mile\", value: 21097 },\n  { label: \"26.2 mile\", value: 42195 },\n  { label: \"50km\", value: 50000 }\n]\n\n// Initialize map version of DISTANCE_OPTIONS\nconst LABEL_BY_DISTANCE = {}\n\nDISTANCE_OPTIONS.forEach((distance) => {\n  LABEL_BY_DISTANCE[distance.value] = distance.label;\n});\n\n// Return label for the distance, or just the raw meters if not found\nexport function getLabel(meters) {\n  let label = LABEL_BY_DISTANCE[meters];\n  return label ? label : meters;\n}","import { Scenario } from './scenario.js';\nimport { getLabel } from './distance.js';\n\nexport class Race {\n  distance = null;    // In meters\n  time = null;        // In seconds\n  timeParts = null;   // Array of hh:mm, mm:ss, or hh:mm:ss\n  scenario = new Scenario();\n\n  setDistance(meters) {\n    this.distance = meters;\n\n    // Re-validate time by setting the hh:mm:ss time parts\n    // and re-calculating the time so it's reasonable for the \n    // distance\n    if (this.timeParts != null) {\n      this.setTimeParts(this.timeParts);\n    }\n  }\n\n  // EYE TBD - get from scenario.age\n  ageGrade() {\n    return 75;\n  }\n\n  // Set time given array of [hh,mm,ss] or [mm,ss] or [hh,mm]\n  // Note that offset 0 is the most significant part (hh or mm).\n  // Adjust time based on what's reasonable for the distance\n  setTimeParts(timeParts) {\n    while (timeParts.length < 3) {\n      timeParts.unshift(0);  // Pad with leading 0 \n    }\n\n    if (this.distance != null && timeParts[0] === 0) {\n      // First pass - assume mm:ss\n      let time = this.calcTime(timeParts);\n      let velocity = this.distance / time;\n\n      if (velocity > 15.0) { \n        // 15 m/s is faster than a human can run, try hh:mm instead\n        timeParts[0] = timeParts[1];\n        timeParts[1] = timeParts[2];\n        timeParts[2] = 0;\n      }\n    }\n\n    // Fully specified hh:mm:ss\n    this.timeParts = timeParts\n    this.time = this.calcTime(timeParts);\n  }\n\n  // Convert timeParts to an integer time\n  calcTime(timeParts) {\n    return timeParts[0] * 3600 + timeParts[1] * 60 + timeParts[2];\n  }\n\n  // Predict time for a given distance, returning the time and \n  // a confidence weight for our prediction. \n  // EYE - add scenario as an input so time delta is part of confidence\n  // and using our own race.scenario as well\n  // EYE - should move all but time out to a model object?\n  predictTime(distance) {\n    // NOTE: 5% factor may need to shift as distances get away from the\n    // past race. 800m might not be accurate either.\n    let factor = 1.05;\n    let adjust = factor ** Math.log2(distance / this.distance);\n    let time = this.time * (distance / this.distance) * adjust;\n\n    // Weight is ratio of race distances diminishing predictive value \n    // as distances get further apart. \n    // EYE - we'll further adjust weight by age, altitude, etc. as \n    // scenario data is fleshed out\n    let ratio = distance / this.distance;\n    if (ratio > 1.0) {\n      ratio = 1 / ratio;\n    }\n    let weight = ratio;  \n\n    /*\n    console.log(\"1. predictTime this.distance=\" + this.distance + \n        \" this.time=\" + this.time + \" input.distance=\" + distance + \n        \" output.time=\" + time + \" adjust=\" + adjust + \n        \" ratio=\" + ratio + \" weight=\" + weight);\n    */\n\n    return [time, weight];\n  }\n\n  getTimeString() {\n    return this.toHHMMSS(this.time);\n  }\n\n  // EYE min/mile\n  getPaceString() {\n    if (this.distance && this.time) {\n      return this.toHHMMSS(1609 * this.time/this.distance);\n    }\n  }\n\n  // Return time as HH:MM:SS format\n  toHHMMSS(time) {\n    let timeString = \"\";\n    if (time) {\n      let hours = Math.floor(time / 3600);\n      let minutes = Math.floor((time - (hours * 3600)) / 60);\n      let seconds = Math.floor(time - (hours * 3600) - (minutes * 60));\n\n      timeString = hours.toString().padStart(2, '0') + ':' + \n        minutes.toString().padStart(2, '0') + ':' + \n        seconds.toString().padStart(2, '0');\n    }\n    return timeString;\n  }\n\n  // Return the race distance label\n  getDistanceLabel() {\n    return getLabel(this.distance);\n  }\n}","import React from 'react';\nimport Select from 'react-select';\n\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport styles from './styles';\n\nimport { Scenario } from './scenario';\nimport { Race } from './race';\nimport { DISTANCE_OPTIONS } from './distance';\n\n// Regular expressions for the form inputs\nconst FIELD = {\n  'distance': {\n    pattern: RegExp(/^\\s*\\d+\\s*$/),\n    help: '(select a distance)'\n  },\n  'time': {\n    pattern: RegExp(/^\\s*(\\d+):?([0-5]\\d{1}?)(:([0-5]\\d{1}))?\\s*$/),\n    help: '(hh:mm:ss or hh:mm or mm:ss)'\n  },\n  'age': {\n    pattern: RegExp(/^\\s*\\d*\\s*$/),\n    help: '(years)'\n  }\n};\n\nconst INITIAL_STATE = {\n  distance: '',\n  time: '',\n  age: '',\n  errors: {\n    distance: FIELD.distance.help,\n    time: FIELD.time.help,\n    age: '',  // Optional field\n  } \n}\n\n// Form to add past race\nexport class PastRaceForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = JSON.parse(JSON.stringify(INITIAL_STATE));\n  }\n\n  // Handle distance state\n  handleDistanceChange = (selectedOption) => {\n    this.setState({ distance: selectedOption.value });\n    let errors = {...this.state.errors};\n    errors.distance = '';\n    this.setState({ errors });\n  };\n\n  // Validate inputs on each key stroke\n  handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    let errors = this.state.errors;\n    let check = FIELD[name];\n    errors[name] = check.pattern.test(value) ? '' : check.help;\n    this.setState({errors, [name]: value});\n  }\n\n  validateForm = () => {\n    let valid = true;\n    Object.values(this.state.errors).forEach(\n      (val) => val.length > 0 && (valid = false)\n    );\n    return valid;\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.validateForm(this.state.errors)) {\n      // Define the race scenario\n      let s = new Scenario();\n      s.age = this.state.age;\n\n      // Parse time into [hh,mm,(ss)] array\n      // EYE time.js?\n      let parsedTime = FIELD.time.pattern.exec(this.state.time);\n      let timeParts = [];\n      timeParts.push(parseInt(parsedTime[1]));\n      timeParts.push(parseInt(parsedTime[2]));\n\n      // Optional last part (ss or mm) is in offset 4 of regex\n      if (parsedTime[4] != null) {\n        timeParts.push(parseInt(parsedTime[4]));\n      }\n\n      // Finally define the race object\n      let race = new Race();\n      race.setDistance(parseInt(this.state.distance));\n      race.setTimeParts(timeParts);\n      race.scenario = s;\n\n      // Submit to the parent past races list\n      this.props.addPastRace(race);\n\n      // And clear the form\n      // EYE - select is not right\n      event.target.reset();\n      this.setState(JSON.parse(JSON.stringify(INITIAL_STATE)));\n    }\n    else {\n      console.error('Invalid Form')\n    }\n  }\n\n  render() {\n    const { errors } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <Paper className={classes.paper}> \n        <h2> Add a Past Race </h2>\n        <form onSubmit={this.handleSubmit} autoComplete=\"off\" noValidate >\n          <div className='distance'>\n            <label htmlFor=\"distance\"> \n              Distance \n              {errors.distance.length > 0 && \n                <span className='error'>{errors.distance}</span>\n              }\n            </label>\n            <Select \n              options={DISTANCE_OPTIONS}\n              onChange={this.handleDistanceChange}\n            />\n\n          </div>\n          <div className='time'>\n            <label htmlFor=\"time\"> \n              Finish Time \n              {errors.time.length > 0 && \n                <span className='error'>{errors.time}</span>\n              }\n            </label>\n            <input type='text' name='time' onChange={this.handleChange} noValidate />\n          </div>\n          <div className='age'>\n            <label htmlFor=\"age\"> \n              Your Age (optional)\n              {errors.age.length > 0 && \n                <span className='error'>{errors.age}</span>\n              }\n            </label>\n            <input type='text' name='age' onChange={this.handleChange} \n              noValidate />\n          </div>\n          <div className='submit'>\n            <button> Add </button>\n          </div>\n        </form>\n      </Paper>\n    );\n  }\n}\n\n// Needed for Material UI styles\nPastRaceForm.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(PastRaceForm);","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport styles from './styles';\n\n// Past races used to predict future results\nexport class PastRaceTable extends React.Component {\n  render() {\n    const { classes } = this.props;\n    const rows = [];\n    this.props.races.forEach((race) => {\n      rows.push(\n        <PastRaceRow race={race} key={rows.length} raceId={rows.length}\n          removePastRace={this.props.removePastRace}/>\n      );\n    });\n\n    //  <div className=\"race-table\"> \n    return (\n      <Paper className={classes.paper}>\n        <h2> Past Races </h2>\n        <table className='race-table'>\n          <thead> \n            <tr>\n              <th> Distance </th>\n              <th> Time </th>\n              <th> Pace </th>\n              <th> Age </th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </Paper>\n    );\n  }\n}\n\nfunction PastRaceRow(props) {\n  let race = props.race;\n  let label = race ? race.getDistanceLabel() : \"\";\n  let timeString = race ? race.getTimeString() : \"\";\n  let pace = race ? race.getPaceString() : \"\";\n  let age = race ? race.scenario.age : \"\";\n  //let ageGrade = race ? race.ageGrade() : \"\";\n\n  //  <tr onClick={() => { console.log(\"Clicked \" + label); }}>\n  return (\n    <tr>\n      <td> {label} </td>\n      <td> {timeString} </td>\n      <td> {pace} </td>\n      <td> {age} </td>\n      <td> \n        <Button variant=\"contained\" name=\"past-race-remove\" \n          onClick={ () => props.removePastRace(props.raceId) }>\n          -\n        </Button>\n      </td>\n\n    </tr>\n  );\n}\n\n// Needed for Material UI styles\nPastRaceTable.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(PastRaceTable);","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport styles from './styles'\n\nimport { DISTANCE_OPTIONS } from './distance.js';\nimport { Race } from './race.js';\n\n// Predicted times for various distances\nexport class TargetRaceTable extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    // EYE - we need to create a model based on the past races\n    // and create output rows with the predictions from the model\n    // for each distance. Maybe push all this to a model method?\n    const rows = [];\n\n    if (this.props.pastRaces.length > 0) {\n      DISTANCE_OPTIONS.forEach((distance) => {\n        // Get weighted predictions from past races\n        let totalTime = 0.0;\n        let totalWeight = 0.0;\n\n        this.props.pastRaces.forEach((pastRace) => {\n          let [time, weight] = pastRace.predictTime(distance.value);\n          totalTime += time * weight;\n          totalWeight += weight;\n        });\n\n        if (totalWeight > 0.0) {\n          let race = new Race();\n          race.distance = distance.value;\n\n          // EYE - Converting to int for now. Should render as hh:mm:ss\n          race.time = parseInt(totalTime / totalWeight);\n          rows.push(\n            <TargetRaceRow race={race} key={rows.length}/>\n          );\n        }\n      });\n    }\n\n    //  <div className=\"race-table\"> \n    return (\n      <Paper className={classes.paper}>\n        <h2> Predicted Times </h2>\n        <table className='race-table'>\n          <thead> \n            <tr>\n              <th> Distance </th>\n              <th> Time </th>\n              <th> Pace </th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </Paper>\n    );\n  }\n}\n\nfunction TargetRaceRow(props) {\n  let race = props.race;\n  let label = race ? race.getDistanceLabel() : \"\";\n  let timeString = race ? race.getTimeString() : \"\";\n  let pace = race ? race.getPaceString() : \"\";\n\n  return (\n    <tr>\n      <td> {label} </td>\n      <td> {timeString} </td>\n      <td> {pace} </td>\n    </tr>\n  );\n}\n\n// Needed for Material UI styles\nTargetRaceTable.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(TargetRaceTable);","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nimport PastRaceForm from './past_race_form.js';\nimport PastRaceTable from './past_race_table.js';\nimport TargetRaceTable from './target_race_table.js';\nimport styles from './styles.js';\n\n// Top level application \nexport class RaceCalc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pastRaces: [],\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    // EYE should have a scenario form too\n    return (\n      <Grid container className={classes.root} spacing={3}>\n        <Grid item xs={12}>\n          <PastRaceForm \n            addPastRace={(r) => this.addPastRace(r)}/>\n          <PastRaceTable races={this.state.pastRaces} \n            removePastRace={(r) => this.removePastRace(r)}/>\n        </Grid>\n\n        <Grid item xs={12}>\n          <TargetRaceTable pastRaces={this.state.pastRaces}/>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  addPastRace(race) {\n    let newPastRaces = this.state.pastRaces.slice();\n    newPastRaces.push(race);\n    this.setState({ pastRaces: newPastRaces });\n  }\n\n  removePastRace(rowNum) {\n    if (rowNum >= 0 && rowNum < this.state.pastRaces.length) {\n      this.state.pastRaces.splice(rowNum, 1);\n      this.setState({ pastRaces: this.state.pastRaces });\n    }\n  }\n}\n\n// Needed for Material UI styles\nRaceCalc.propTypes = { classes: PropTypes.object.isRequired };\nexport default withStyles(styles)(RaceCalc);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// NOTE!!! Material-UI classes don't work with: import { RaceCalc }\nimport RaceCalc from './race_calc.js';  \nimport './index.css';\n\n// ===================================\nReactDOM.render(\n    <RaceCalc />,\n    document.getElementById('root')\n);"],"sourceRoot":""}